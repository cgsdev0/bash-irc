#!/usr/bin/env bash

cd "${0%/*}"

set -o noglob

# you do NOT want to know why
export LC_ALL=C

ORM_DB=db.sqlite
VERSION=0.0.1
IRC_SERVER_HOST=127.0.0.1
PORT=${PORT:-6667}

declare -A SUBS
# self explanatory
function query() {
  function _query() {
    local QUERY
    QUERY="$1"
    shift
    printf "PRAGMA foreign_keys = ON;\n"
    printf ".output /dev/null\n"
    printf "PRAGMA journal_mode = WAL;\n"
    printf ".output\n"
    printf ".parameter init\n"
    INDEX=1
    for arg in "$@"; do
      : "${arg//\\/\\\\\\\\}"
      : "${_//$'\t'/    }"
      : "${_//\"/\\\"}"
      : "${_//\'/\\\'}"
      : "${_//$'\n'/\\\\n}"
      if [[ "$_" =~ "'" ]]; then
        printf ".parameter set ?%d \"%s\"\n" $INDEX "$_"
      else
        printf ".parameter set ?%d \"'%s'\"\n" $INDEX "$_"
      fi
      ((INDEX++))
    done
    printf "%s\n" "$QUERY";
  }
  sqlite3 -separator $'\t' "$ORM_DB" 2>&1 < <(_query "$@")
}

split() {
   # Usage: split "string" "delimiter"
   IFS=$'\n' read -d "" -ra arr <<< "${1//$2/$'\n'}"
}

function listen() {
  local TOPIC
  TOPIC="$1"
  if [[ -z "$TOPIC" ]]; then
    debug "ATTEMPTED TO LISTEN ON EMPTY TOPIC"
    return
  fi
  local -a arr
  while true; do
    IFS= read -r line < "$TOPIC"
    split "${line//$'\r'}" ' '
    if [[ "${arr[0]}" =~ :(.+) ]]; then
      PREFIX="${BASH_REMATCH[1]}"
      arr=("${arr[@]:1}")
    fi
    COMMAND="${arr[0]}"
    arr=("${arr[@]:1}")

    local USER="${PREFIX%%@*}"
    local USER="${USER%%!*}"

    case "$COMMAND" in
      PSST)
        # internal stuff dont worry its all good
        debug "psst: ${arr[*]}"
        CMD="${arr[0]}"
        arr=("${arr[@]:1}")
        case "$CMD" in
          NICK)
            NICK="${arr[0]}"
            ;;
        esac
        continue
        ;;
      PRIVMSG)
        CHANNEL="${arr[0]}"
        [[ "$USER" == "$NICK" ]] && continue
        ;;
      JOIN)
        CHANNEL="${arr[0]:1}"
        if [[ "$USER" == "$NICK" ]]; then
          SUBS["$CHANNEL"]=true
        fi
        ;;
      PART)
        CHANNEL="${arr[0]:1}"
        if [[ "$USER" == "$NICK" ]]; then
          debug "listener: $USER PARTED from $CHANNEL"
          unset SUBS["$CHANNEL"]
        fi
        ;;
      NICK)
        if [[ "$USER" == "$NICK" ]]; then
          NICK="${arr[0]}"
        fi
        ;;
      QUIT)
        ;;
      *)
        continue
        ;;
    esac
    if [[ "$USER" != "$NICK" && -n "$CHANNEL" ]]; then
      [[ -z "${SUBS[$CHANNEL]}" ]] && debug "FILTERED BY '$CHANNEL' '$USER' '$NICK'" && continue
    fi
    # forward the message
    printf "%s\n" "$line"
  done
}

function subscribe() {
  mkdir -p pubsub/irc
  local tmppipe=$(mktemp -up pubsub/irc)
  mkfifo -m 600 "$tmppipe"
  SUBSCRIPTION="$tmppipe"
  debug "pipe: opened: $tmppipe"
}

function unsubscribe() {
  [[ ! -z "$UNSUBBED" ]] && return
  UNSUBBED=true
  debug "pipe: closed: $SUBSCRIPTION"
  [[ ! -z "$SUBSCRIPTION" ]] && rm -f "$SUBSCRIPTION"
  query 'DELETE FROM conns WHERE id = ?;' "$CONN_ID"
  rm -rf "$HEARTBEAT"
}

function broadcast() {
  [[ ! -d "pubsub/irc" ]] && return
  TEE_ARGS=$(find pubsub/irc -type p)
  [[ -z "$TEE_ARGS" ]] && return
  printf "broadcast: " 1>&2
  tee /dev/stderr $TEE_ARGS > /dev/null
}

reply() {
  local RESPONSE
  printf -v "RESPONSE" ":%s %s\r\n" "$IRC_SERVER_HOST" "$*"
  RESPONSE="${RESPONSE:0:512}"
  printf "%s" "$RESPONSE"
  debug "outbound[$CONN_ID]: ${RESPONSE//$'\n'/}"
}

debug() {
  printf "%s\n" "$@" 1>&2
}

heartbeat() {
  while true; do
    if [[ ! -f "$HEARTBEAT" ]]; then
      debug "heartbeat: already closed"
      exit 1
    fi
    if [[ "$(<$HEARTBEAT)" -lt $PING ]]; then
      debug "heartbeat: ping lt $PING, disconnecting"
      exit 1
    fi
    reply PING ":$PING"
    ((PING++))
    sleep 60
  done
}

if [[ -z "$IRC_CONN_HANDLER" ]]; then

  rm -rf pubsub
  mkdir pubsub


  query 'CREATE TABLE IF NOT EXISTS channels
    (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name varchar(201) NOT NULL UNIQUE
    );'

  query 'INSERT INTO channels(name) VALUES("#test");'

  query 'CREATE TABLE IF NOT EXISTS conns
    (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      nick varchar(201) UNIQUE
    );'

  query 'CREATE TABLE IF NOT EXISTS membership
    (
      channel INTEGER,
      who INTEGER,
      PRIMARY KEY (channel, who),
      FOREIGN KEY(channel) REFERENCES channels(id) ON DELETE CASCADE,
      FOREIGN KEY(who) REFERENCES conns(id) ON DELETE CASCADE
    );'

  query "DELETE FROM conns; DELETE FROM SQLITE_SEQUENCE WHERE name='conns';"

  echo -n "main: Starting server on port "

  export IRC_CONN_HANDLER=true
  export IRC_SERVER_CREATED="$(date)"

  tcpserver -v -1 -o -l 0 -H -D -R -c 1000 0 $PORT $0

else
  REGISTERED=
  welcome() {
    [[ -n "$REGISTERED" ]] && return;
    REGISTERED=1
    reply 001 $NICK ":Welcome, $NICK!$USER@$IRC_SERVER_HOST"
    reply 002 $NICK ":Your host is $IRC_SERVER_HOST, running version $VERSION"
    reply 003 $NICK ":This server was created $IRC_SERVER_CREATED"
    reply 004 $NICK "$IRC_SERVER_HOST bash-$VERSION"
    reply 376 $NICK ":End of the /MOTD command."
  }

  PING=0
  PONG=0
  # echo "connection opened with $TCPREMOTEIP" 1>&2
  subscribe
  listen "$SUBSCRIPTION" &
  mkdir -p pubsub/heartbeat
  HEARTBEAT="$(mktemp -p pubsub/heartbeat)"
  debug "heartbeat: opened $HEARTBEAT"
  echo 0 > "$HEARTBEAT"
  heartbeat &
  CONN_ID="$(query 'INSERT INTO conns DEFAULT VALUES RETURNING id;')"
  debug "conn_id: $CONN_ID"
  trap unsubscribe EXIT
  while IFS= read -r line; do
    split "${line//$'\r'}" ' '
    if [[ "${arr[0]}" =~ :(.+) ]]; then
      PREFIX="${BASH_REMATCH[1]}"
      arr=("${arr[@]:1}")
    fi
    COMMAND="${arr[0]}"
    debug "inbound[$CONN_ID]: ${line//$'\r'}"
    arr=("${arr[@]:1}")
    case "${COMMAND^^}" in
      # CAP)
      #   CAP="${arr[0]}"
      #   reply CAP "* NAK :"
      #   ;;
      NICK)
        NICK_REGEX='^[A-}][-0-9A-}]{0,8}$'
        NEW_NICK="${arr[0]#:}"
        if [[ -z "$NEW_NICK" ]]; then
          reply 431 ":No nickname given"
        elif [[ ! "$NEW_NICK" =~ $NICK_REGEX ]]; then
          reply 432 $NEW_NICK ":Erroneous nickname"
        else
          RESULT="$(query 'UPDATE conns SET nick = ? WHERE id = ?;' "$NEW_NICK" "$CONN_ID")"
          if [[ -n "$RESULT" ]]; then
            debug "result: $RESULT"
            debug "error: nickname $NEW_NICK already in use"
            reply 433 '*' $NEW_NICK ":Nickname is already in use"
          else
            if [[ -n "$NICK" ]]; then
              printf "%s\r\n" ":$NICK!$USER@$IRC_SERVER_HOST NICK $NEW_NICK" | broadcast
              NICK="$NEW_NICK"
            else
              NICK="$NEW_NICK"
              debug "PSSSSSSSSSSSST NICK $NICK"
              echo "PSST NICK $NICK" > "$SUBSCRIPTION"
              welcome
            fi
          fi
        fi
        ;;
      USER)
        USER="${arr[0]}"
        MODE="${arr[1]}"
        REALNAME="${arr[3]}"
        if [[ -n "$NICK" ]]; then
          welcome
        fi
        ;;
      PRIVMSG)
        TARGET="${arr[0]}"
        arr=("${arr[@]:1}")
        MSG="${arr[*]}"
        if [[ "${MSG:0:1}" != ":" ]]; then
          MSG=":$MSG"
        fi
        printf "%s\r\n" ":$NICK PRIVMSG $TARGET $MSG" | broadcast
        ;;
      JOIN)
        if [[ "${arr[@]}" == "0" ]]; then
          debug "joins: $NICK did join 0"
        elif [[ -z "$REGISTERED" ]]; then
            reply 451 '*' ':You have not registered'
        elif [[ -n "$NICK" ]]; then
          CHANNELS="${arr[0]}"
          KEYS="${arr[1]}"
          split "$CHANNELS" ','
          CHANNELS=("${arr[@]}")
          split "$KEYS" ','
          KEYS=("${arr[@]}")
          for CHANNEL in ${CHANNELS[@]}; do
            CHANNEL_ID="$(query "SELECT id FROM channels WHERE name = ?;" "$CHANNEL")"
            if [[ -z "$CHANNEL_ID" ]]; then
              continue
            fi
            query "INSERT INTO membership(channel, who) VALUES(?, ?);" "$CHANNEL_ID" "$CONN_ID"
            debug "joins: $NICK joined $CHANNEL"
            SUBS["$CHANNEL"]=true
            printf "%s\r\n" ":$NICK!$USER@$IRC_SERVER_HOST JOIN :$CHANNEL" | broadcast
            reply 366 $NICK $CHANNEL :
          done
        fi
        ;;
      QUIT)
        QUIT_MESSAGE="${arr[*]#:}"
        printf "%s\r\n" ":$NICK!$USER@$IRC_SERVER_HOST QUIT :$QUIT_MESSAGE" | broadcast
        exit 0
        ;;
      PART)
        CHANNELS="${arr[0]}"
        KEYS="${arr[1]}"
        split "$CHANNELS" ','
        CHANNELS=("${arr[@]}")
        split "$KEYS" ','
        KEYS=("${arr[@]}")

        for CHANNEL in ${CHANNELS[@]}; do
          unset SUBS["$CHANNEL"]
          printf "%s\r\n" ":$NICK!$USER@$IRC_SERVER_HOST PART :$CHANNEL" | broadcast
          :
        done
        ;;
      PING)
        reply PONG "$NICK" "${arr[0]}"
        ;;
      PONG)
        ((PONG++))
        echo "$PONG" > "$HEARTBEAT"
        ;;
      *)
        :
        ;;
    esac
  done
  unsubscribe
fi
